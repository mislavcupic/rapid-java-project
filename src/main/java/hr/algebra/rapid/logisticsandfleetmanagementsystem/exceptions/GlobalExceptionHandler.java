package hr.algebra.rapid.logisticsandfleetmanagementsystem.exceptions;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.dao.DataIntegrityViolationException;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    // 游꿢 Hvata gre코ke u vezi s UNIQUE/PRIMARY KEY (kao na va코oj drugoj slici)
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<Object> handleDataIntegrityViolation(DataIntegrityViolationException ex) {

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.CONFLICT.value());
        body.put("error", "Data Conflict");

        // Klijentu 코aljemo samo 캜istu poruku
        body.put("message", "Gre코ka u podacima: Entitet s ovim ID-om ili klju캜em ve캖 postoji. Provjerite Tracking No. ili ID.");

        return new ResponseEntity<>(body, HttpStatus.CONFLICT); // HTTP 409 Conflict
    }

    // 游꿢 Hvata sve ostale nekontrolirane 500 gre코ke (kao na va코oj prvoj slici)
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Object> handleAllExceptions(Exception ex) {

        // Ovdje se SAMO logira puni trace (za vas), ali se NE 코alje klijentu.
        // System.err.println("INTERNAL SERVER ERROR: " + ex); // Koristite logger umjesto System.err

        Map<String, Object> body = new LinkedHashMap<>();
        body.put("timestamp", LocalDateTime.now());
        body.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        body.put("error", "Internal Server Error");
        // Klijentu 코aljemo samo generi캜ku poruku
        body.put("message", "Do코lo je do neo캜ekivane gre코ke na serveru. Molimo poku코ajte ponovno.");

        return new ResponseEntity<>(body, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
